package oneapp.incture.workbox.demo.notification.dao;

import org.hibernate.Query;
import org.springframework.stereotype.Repository;

import com.sap.cloud.security.xsuaa.token.Token;

import oneapp.incture.workbox.demo.adapter_base.dao.BaseDao;
import oneapp.incture.workbox.demo.adapter_base.util.ExecutionFault;
import oneapp.incture.workbox.demo.adapter_base.util.PMCConstant;
import oneapp.incture.workbox.demo.adapter_base.util.ServicesUtil;
import oneapp.incture.workbox.demo.notification.dto.NotificationEventDto;
import oneapp.incture.workbox.demo.notification.entity.NotificationUserConfigDo;

//////@Transactional
@Repository("NotificationUserConfigDao")
public class NotificationUserConfigDao extends BaseDao<NotificationUserConfigDo, NotificationEventDto> {

	@Override
	protected NotificationEventDto exportDto(NotificationUserConfigDo entity) {

		NotificationEventDto dto = new NotificationEventDto();

		if (!ServicesUtil.isEmpty(entity.getEventId()))
			dto.setEventId(entity.getEventId());
		if (!ServicesUtil.isEmpty(entity.getId()))
			dto.setUserId(entity.getId());
		if (!ServicesUtil.isEmpty(entity.getChannel()))
			dto.setChannel(entity.getChannel());
		if (!ServicesUtil.isEmpty(entity.getType()))
			dto.setType(entity.getType());

		return dto;
	}

	@Override
	protected NotificationUserConfigDo importDto(NotificationEventDto fromDto) {

		NotificationUserConfigDo entity = new NotificationUserConfigDo();
		if (!ServicesUtil.isEmpty(fromDto.getEventId()))
			entity.setEventId(fromDto.getEventId());
		if (!ServicesUtil.isEmpty(fromDto.getUserId()))
			entity.setId(fromDto.getUserId());
		if (!ServicesUtil.isEmpty(fromDto.getChannel()))
			entity.setChannel(fromDto.getChannel());
		if (!ServicesUtil.isEmpty(fromDto.getType()))
			entity.setType(fromDto.getType());
		return entity;
	}

	public String saveOrUpdate(NotificationEventDto fromDto) {
		try {
			saveOrUpdate(importDto(fromDto));
			return PMCConstant.SUCCESS;
		} catch (ExecutionFault e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return PMCConstant.FAILURE;
		}
	}

	public String deleteUserConfig(String eventIds,Token token) {

		String queryString = "delete from user_notification_config where id='"
				+ token.getLogonName() + "'";

		try {

			if (!ServicesUtil.isEmpty(eventIds)) {
				queryString += " and event_id in ('" + eventIds.substring(0, eventIds.length() - 3) + "')";
			}

			Query query = getSession().createSQLQuery(queryString);
			query.executeUpdate();
			return PMCConstant.SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return PMCConstant.FAILURE;
		}
	}

	public String deleteProfileConfig(String userId) {
		String queryString = "delete from user_notification_config where id ='" + userId + "'";

		try {
			System.err.println("[deleteProfileConfig][Query String ]" + queryString);
			Query query = getSession().createSQLQuery(queryString);
			query.executeUpdate();
			return PMCConstant.SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return PMCConstant.FAILURE;
		}
	}

	public String getUserProfile(String viewName,Token token) {

		Query fetchNameQry = this.getSession()
				.createSQLQuery("select profile_id from notification_profile_setting" + " where user_id='"
						+ token.getLogonName() + "' " + " and profile_name='" + viewName
						+ "'");
		String profileId = (String) fetchNameQry.uniqueResult();
		System.err.println("[getUserProfile][profileId]" + profileId);

		return profileId;
	}
	

}