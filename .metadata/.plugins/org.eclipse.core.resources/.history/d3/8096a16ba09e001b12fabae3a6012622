package com.oneapp.icf.assignment.dao;

import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.Query;
import org.springframework.stereotype.Repository;

import oneapp.incture.workbox.demo.adapter_base.dao.BaseDao;
import oneapp.incture.workbox.demo.adapter_base.util.ServicesUtil;
import oneapp.incture.workbox.demo.notification.dto.NotificationViewSettingsDto;
import oneapp.incture.workbox.demo.notification.entity.NotificationViewSettingsDo;

//////@Transactional
@Repository("NotificationViewSettingDao")
public class EmployeeDao extends BaseDao<NotificationViewSettingsDo, NotificationViewSettingsDto> {

	@Override
	protected NotificationViewSettingsDto exportDto(NotificationViewSettingsDo entity) {

		NotificationViewSettingsDto notificationViewSettingsDto = new NotificationViewSettingsDto();

		if (!ServicesUtil.isEmpty(entity.getViewType()))
			notificationViewSettingsDto.setViewType(entity.getViewType());
		if (!ServicesUtil.isEmpty(entity.getViewName()))
			notificationViewSettingsDto.setViewName(entity.getViewName());
		if (!ServicesUtil.isEmpty(entity.getUserId()))
			notificationViewSettingsDto.setUserId(entity.getUserId());
		if (!ServicesUtil.isEmpty(entity.getSettings()))
			notificationViewSettingsDto.setSettings(entity.getSettings());
		if (!ServicesUtil.isEmpty(entity.getViewIcon()))
			notificationViewSettingsDto.setViewIcon(entity.getViewIcon());
		if (!ServicesUtil.isEmpty(entity.getIsDefault()))
			notificationViewSettingsDto.setIsDefault(entity.getIsDefault());
		return notificationViewSettingsDto;
	}

	@Override
	protected NotificationViewSettingsDo importDto(NotificationViewSettingsDto fromDto) {

		NotificationViewSettingsDo entity = new NotificationViewSettingsDo();

		if (!ServicesUtil.isEmpty(fromDto.getViewType()))
			entity.setViewType(fromDto.getViewType());
		if (!ServicesUtil.isEmpty(fromDto.getViewName()))
			entity.setViewName(fromDto.getViewName());
		if (!ServicesUtil.isEmpty(fromDto.getUserId()))
			entity.setUserId(fromDto.getUserId());
		if (!ServicesUtil.isEmpty(fromDto.getSettings()))
			entity.setSettings(fromDto.getSettings());
		if (!ServicesUtil.isEmpty(fromDto.getViewIcon()))
			entity.setViewIcon(fromDto.getViewIcon());
		if (!ServicesUtil.isEmpty(fromDto.getIsDefault()))
			entity.setIsDefault(fromDto.getIsDefault());

		return entity;
	}

	@SuppressWarnings("unchecked")
	public List<NotificationViewSettingsDto> getViewObjects(String userId, String isDefault) {

		List<NotificationViewSettingsDto> notificationViewDtos = null;
		NotificationViewSettingsDto viewDto = null;
		String query = "select distinct vs.view_type, vs.view_name , vs.settings ,CONCAT( (SELECT COALESCE(STRING_AGG (event_name, ', '), '') "
				+ "FROM notification_events ne where vs.view_name=ne.event_group ) ,(SELECT  COALESCE(STRING_AGG ( ne.event_name, ', ') , '') "
				+ "FROM notification_events ne join event_channel_mapping ecm on ecm.event_id=ne.event_id where ecm.channel= vs.view_name )) 	as"
				+ "eventList, vs.default , vs.view_icon  from view_setting vs ";

		if (!ServicesUtil.isEmpty(userId)) {
			query += "where vs.user_id='" + userId + "'";
			if (!ServicesUtil.isEmpty(isDefault)) {
				query += "and vs.default= " + isDefault;
			}
		}

		System.err.println("NotificationViewSettingDao.getViewObjects() query" + query);
		Query taskCreatorQry = getSession().createSQLQuery(query);
		List<Object[]> resultList = taskCreatorQry.list();

		if (resultList != null) {
			notificationViewDtos = new ArrayList<>();
			for (Object[] obj : resultList) {
				viewDto = new NotificationViewSettingsDto();
				viewDto.setViewType(obj[0] == null ? null : (String) obj[0]);
				viewDto.setViewName(obj[1] == null ? null : (String) obj[1]);
				viewDto.setSettings(obj[2] == null ? null : (String) obj[2]);
				viewDto.setEvents(obj[3] == null ? null : (String) obj[3]);

				byte flag = (obj[4] == null ? 0 : (byte) obj[4]);
				viewDto.setIsDefault(flag == 1 ? true : false);

				viewDto.setViewIcon(obj[5] == null ? null : (String) obj[5]);
				notificationViewDtos.add(viewDto);
			}
		}

		return notificationViewDtos;
	}

}